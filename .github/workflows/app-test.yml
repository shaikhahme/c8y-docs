name: app-tester
on:
  workflow_dispatch:
  schedule:
    - cron: 00 19 * * *

permissions:
  pull-requests: write
  contents: write

jobs:
  test-app:
    name: Get component details
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment: pipeline-read

    steps:
      - name: checking out 1st repo
        uses: actions/checkout@v4
        with:
          path: docs
          fetch-depth: 1

      - name: echo git repo-1
        run: |
          echo ${{ github.repository }} 
          echo ${{ github.repository_owner }}

      - name: Get token
        id: token
        run: |
          githubAppID="${{ vars.APP_ID }}"
          githubAppPrivateKey="${{ secrets.APP_PRIVATE_KEY }}" 
          githubAppInstallationId="${{ vars.APP_INSTALL_ID }}"
          githubApiUrl="${{ vars.GH_SERVER_API_URL }}"
          iat=$(date +%s)
          # Expire 9 minutes in the future. 10 minutes is the max for GitHub
          exp=$((iat + 540))
          # Generate encoded JWT header
          jwtHeaderRaw='{"alg":"RS256"}'
          jwtHeader=$( echo -n "${jwtHeaderRaw}" | openssl base64 | tr -d '=' | tr '/+' '_-' | tr -d '\n' )
          # Generate encoded JWT payload
          jwtPayloadRaw='{"iat":'"${iat}"',"exp":'"${exp}"',"iss":'"${githubAppID}"'}'
          jwtPayload=$( echo -n "${jwtPayloadRaw}" | openssl base64 | tr -d '=' | tr '/+' '_-' | tr -d '\n' )
          # Generate encoded JWT signature
          jwtSignature=$( openssl dgst -sha256 -sign <(echo -n "${githubAppPrivateKey}") <(echo -n "${jwtHeader}.${jwtPayload}") | openssl base64 | tr -d '=' | tr '/+' '_-' | tr -d '\n' )
          jwtToken=${jwtHeader}.${jwtPayload}.${jwtSignature}                              
          token=$(curl --fail --silent -X POST -H "Authorization: Bearer ${jwtToken}" -H "Accept: application/vnd.github.v3+json" "${githubApiUrl}/app/installations/${githubAppInstallationId}/access_tokens" | jq -r .token)
          echo "jwt=${jwtToken}" >> "${GITHUB_OUTPUT}"
          echo "token=${token}" >> "${GITHUB_OUTPUT}"

      - name: Checkout build pipeline repo
        uses: actions/checkout@v4
        with:
          repository: ${{ vars.FORKED_REPO }}
          fetch-depth: 1
          ref: ${{ vars.BRANCH }}
          token: ${{ steps.token.outputs.token }}
          github-server-url: ${{ vars.GH_SERVER_URL }}
          path: pipeline

      - name: Get Component Details
        run: |
          cat docs/data/buildartifact.json
          
          buildartifacts=$(cat docs/data/buildartifact.json | jq '.options[].option' | xargs)
          echo "[]" > output.json
          for artifact in $buildartifacts ;
          do
              cat pipeline/clusters/helm_charts_data.json | jq --arg artifact "$artifact" '[to_entries[] | select(.value.component_name==$artifact)][0].value.zones.["c8y-ops-zone-1"].clusters.["eu-latest-cumulocity-com"]' > details.json
              versionOfArtifact=$(cat details.json | jq '.version' | xargs)
              timestamp=$(cat details.json | jq '.updated_at' | xargs)
              rm details.json
              if [[ $versionOfArtifact == 'null' ]]; then
                  echo "$artifact is currently not deployed"
              else
                  echo "$artifact is currently deployed in version: $versionOfArtifact and was deployed at $timestamp"
                  cat output.json | jq --arg artifact "$artifact" --arg version "$versionOfArtifact" --arg timestamp "$timestamp" '. += [{"artifact": $artifact, "version": $version, "timestamp": $timestamp}]' > output.tmp
                  mv output.tmp output.json
              fi
          
          done
          echo "matrix=$(cat output.json | jq -c .)"
