name: app-tester
on:
  workflow_dispatch:
  schedule:
    - cron: 00 19 * * *

permissions:
  pull-requests: write
  contents: write

jobs:
  get-component-details:
    name: Get component details from helm charts
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment: pipeline-read
    outputs:
      matrix: ${{steps.component-details.output.matrix}}
    steps:
      - name: checking out docs repo
        uses: actions/checkout@v4
        with:
          path: docs
          fetch-depth: 1

      - name: echo git repo-1
        run: |
          echo ${{ github.repository }} 
          echo ${{ github.repository_owner }}



      - name: Creating github access token
        id: token
        run: |
          githubAppID="${{ vars.APP_ID }}"
          githubAppPrivateKey="${{ secrets.APP_PRIVATE_KEY }}" 
          githubAppInstallationId="${{ vars.APP_INSTALL_ID }}"
          githubApiUrl="${{ vars.GH_SERVER_API_URL }}"
          iat=$(date +%s)
          # Expire 9 minutes in the future. 10 minutes is the max for GitHub
          exp=$((iat + 540))
          # Generate encoded JWT header
          jwtHeaderRaw='{"alg":"RS256"}'
          jwtHeader=$( echo -n "${jwtHeaderRaw}" | openssl base64 | tr -d '=' | tr '/+' '_-' | tr -d '\n' )
          # Generate encoded JWT payload
          jwtPayloadRaw='{"iat":'"${iat}"',"exp":'"${exp}"',"iss":'"${githubAppID}"'}'
          jwtPayload=$( echo -n "${jwtPayloadRaw}" | openssl base64 | tr -d '=' | tr '/+' '_-' | tr -d '\n' )
          # Generate encoded JWT signature
          jwtSignature=$( openssl dgst -sha256 -sign <(echo -n "${githubAppPrivateKey}") <(echo -n "${jwtHeader}.${jwtPayload}") | openssl base64 | tr -d '=' | tr '/+' '_-' | tr -d '\n' )
          jwtToken=${jwtHeader}.${jwtPayload}.${jwtSignature}                              
          token=$(curl --fail --silent -X POST -H "Authorization: Bearer ${jwtToken}" -H "Accept: application/vnd.github.v3+json" "${githubApiUrl}/app/installations/${githubAppInstallationId}/access_tokens" | jq -r .token)
          echo "jwt=${jwtToken}" >> "${GITHUB_OUTPUT}"
          echo "token=${token}" >> "${GITHUB_OUTPUT}"




      - name: Checkout build pipeline repo
        uses: actions/checkout@v4
        with:
          repository: ${{ vars.FORKED_REPO }}
          fetch-depth: 1
          ref: ${{ vars.BRANCH }}
          token: ${{ steps.token.outputs.token }}
          github-server-url: ${{ vars.GH_SERVER_URL }}
          path: pipeline

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
            python-version: '3.10'

      - name: parse component details
        id: component-details
        run: |
          python <<EOF
          import json
          from _datetime import datetime
          output = []
          buildartifact_path = "docs/data/buildartifact.json"
          helmcharts_path = "pipeline/clusters/helm_charts_data.json"
          with open(buildartifact_path) as json_file:
            artifact_options_list = json.load(json_file).get('options')
            artifact_list = [build_artifact['option'] for build_artifact in artifact_options_list]
          with open(helmcharts_path) as json_file:
            components_list = list(json.load(json_file).values())
          for component in components_list:
            if component.get('component_name') in artifact_list:
              component_name = (component.get('component_name'))
              component_version = (component.get('zones').get('c8y-ops-zone-1').get('desired_version'))
              try:
                component_update_date = datetime.strptime(
                str(component.get('zones').get('c8y-ops-zone-1').get('updated_at')), '%Y-%m-%d %H:%M:%S.%f')
                component_update_date = component_update_date.strftime('%Y-%m-%d')
              except ValueError:
                component_update_date = component.get('zones').get('c8y-ops-zone-1').get('updated_at')
  
              output.append({'component_name':
                component_name, 'component_version': component_version,
                  'component_update_date': component_update_date})
          with open('component_details.json', 'w') as output_file:
            json.dump(output, output_file)
          EOF
          echo "matrix=$(cat component_details.json | jq -c .)" >> $GITHUB_OUTPUT
          echo "matrix=$(cat component_details.json | jq -c .)"


      - name: test component output
        run: |
          echo "test 1"
          echo ${{ steps.component-details.output.matrix }}
          echo "test 2"
          echo "${{ steps.component-details.output.matrix }}"
          echo "test 3"
          echo ${{ steps.component-details.output }}
    